version: '3.8'

services:
  # Service for your Node.js backend application
  app:
    build: .
    container_name: revedkids_backend_app
    restart: unless-stopped
    ports:
      - "3003:3003"
    # Load environment variables from a secure, git-ignored file
    env_file:
      - ./.env.docker
    # This ensures the app only starts after the database and redis are healthy
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - revedkids-network

  # Service for the MySQL database
  db:
    image: mysql:8.0
    container_name: revedkids_mysql_db
    restart: unless-stopped
    # IMPORTANT: All secrets are now loaded from a secure file
    env_file:
      - ./.env.docker
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - revedkids-network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service for the Redis cache
  redis:
    image: redis:7-alpine
    container_name: revedkids_redis_cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - revedkids-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # Service for the Adminer database UI (useful for development)
  adminer:
    image: adminer
    container_name: revedkids_adminer_ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - revedkids-network

# Use a dedicated bridge network for better isolation
networks:
  revedkids-network:
    driver: bridge

# Define volumes for data persistence
volumes:
  mysql_data:
  redis_data: